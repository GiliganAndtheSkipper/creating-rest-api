#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('books-backend:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 * ✅ FIXED: Removed the fallback to 3000 for Render compatibility
 */
const port = normalizePort(process.env.PORT); // Only using Render's assigned port
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, '0.0.0.0'); // ✅ Ensuring it binds to all IP addresses
server.on('error', (error) => onError(error, port));  // ✅ Fixed scoping issue
server.on('listening', () => onListening(server));    // ✅ Fixed scoping issue

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);
    if (isNaN(port)) {
        return val; // Named pipe
    }
    if (port >= 0) {
        return port; // Port number
    }
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error, port) { // ✅ Added port parameter
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(server) { // ✅ Added server parameter
    const addr = server.address();
    const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
    debug('Listening on ' + bind);
    console.log(`✅ Server successfully started on port ${addr.port}`);
}
